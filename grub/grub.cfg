# vim:fdm=marker fmr={{{,}}}
set timeout=5

#### BEGIN GRUBENV	{{{
# Using grubenv for next boot.
if [ -s $prefix/grubenv ]; then
  load_env
fi
if [ "${next_entry}" ] ; then
	set default="${next_entry}"
	set next_entry=
	save_env next_entry
	set boot_once=true
else
	set default="0"
fi
#### END GRUBENV	}}}

insmod regexp # Regular Expressions

#### BEGIN GRAPHICAL SETTINGS	{{{
if [ ${grub_platform} == "pc" ]; then
	insmod vbe
	insmod vga
fi

if [ ${grub_platform} == "efi" ]; then
	insmod efi_gop
	insmod efi_uga
fi

if loadfont ${prefix}/fonts/unicode.pf2; then
	insmod gfxterm
	set gfxmode=auto
	set gfxpayload=keep
	terminal_output gfxterm
fi

#insmod png
#set theme=($root)/boot/grub/themes/breeze/theme.txt
#export theme
#### END GRAPHICAL SETTINGS		}}}

### ISO Partition UUID and directory
probe -u $root --set=rootuuid
set imgdevpath="/dev/disk/by-uuid/$rootuuid"
export imgdevpath

set isodir='/boot/iso'
export isodir

menuentry 'Puppy / PARDUS' --class puppy --class gnu-linux --class os {
	if [ -d (hd1,msdos5)/boot/grub/grub.cfg ]; then
		echo "Booting operating system: PARDUS"
		root=(hd1,msdos5)
		configfile /boot/grub/grub.cfg
	else
		set PUPDIR='/boot/pups/Puppy6.0.2_PAE'
		set ARGS="psubdir=$PUPDIR psubok=true pfix=ram"
	fi
	
	linux $PUPDIR/vmlinuz $ARGS
	initrd $PUPDIR/initrd.gz
}

# insmod regexp # For globbing
for configfile in $prefix/grubiso.d/*.cfg; do
	source $configfile
done

if [ ${grub_platform} == "efi" ]; then
	submenu 'UEFI Shell' {
		menuentry "UEFI Shell v1" {
			chainloader /boot/shell/shellx64_v1.efi
		}
		menuentry "UEFI Shell v2" {
			chainloader /boot/shell/shellx64_v2.efi
		}
		menuentry "Shellv2 for older systems" {
			chainloader /boot/shell/UefiShellX64.efi
		}
	}
fi

menuentry "Boot First Drive" {
	root=(hd1)
	chainloader +1
}
